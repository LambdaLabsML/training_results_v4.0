#!/bin/bash

# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#SBATCH --exclusive
#SBATCH --mem=0
#SBATCH --nodelist=ml-512-node-063    # Specific nodes

set -eux

# Vars without defaults
: "${CONT:?CONT not set}"
: "${DGXSYSTEM:?DGXSYSTEM not set}"
: "${NEXP:?NEXP not set}"

# Vars with defaults
: "${CHECK_COMPLIANCE:=1}"
: "${MLPERF_RULESET:=4.0.0}"
: "${MLPERF_SYSTEM_NAME:='unknown'}"
: "${DGXNGPU:=8}"
: "${NEXP:=1}"
: "${SEED_BASE:=${SEED-$RANDOM}}"
: "${DATESTAMP:=$(date +'%y%m%d%H%M%S%N')}"
: "${CLEAR_CACHES:=1}"
: "${LOGDIR:=./results}"
: "${DROPCACHE_CMD:="sudo /sbin/sysctl vm.drop_caches=3"}"
: "${API_LOG_DIR:=./api_logs}" # apiLog.sh output dir
: "${API_LOGGING:=0}"
: "${ABSLOGDIR:=${PWD}/results}"
: "${POWERCMDDIR:=' '}"
: "${SET_MAXQ_CLK:=0}"
: "${SET_MINEDP_CLK:=0}"
: "${NCCL_TEST:=1}"
: "${NVTX_FLAG:=0}"

# override enroot's (sometimes in-use) randomly chosen ephemeral port.  29500
# is non-ephemeral and not assigned by the IANA.  If 29500 is in use on your
# cluster for some other service, then choose a different non-ephemeral
# unassigned port from
# https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
# or https://svn.nmap.org/nmap/nmap-services.  The range that needs to be
# avoided is the ephemeral port range, returned by `sysctl
# net.ipv4.ip_local_port_range` (32768-61000 by default).
: "${MASTER_PORT:=29500}"
export MASTER_PORT

export MASTER_ADDR="$(scontrol show hostnames "${SLURM_JOB_NODELIST-}" | head -n1)"
#export MASTER_ADDR=$(ip -4 -o addr | egrep -v 'enp|127.0.0.1|docker' | awk '{print $4}' | awk -F / '{print $1}' | tail -n1)
echo "using MASTER_ADDR \"${MASTER_ADDR}\" of list \"${SLURM_JOB_NODELIST}\""

cleanup_pyxis() {
    srun --ntasks="${SLURM_JOB_NUM_NODES}" /bin/bash -c 'if [[ "$(enroot list)" ]]; then enroot remove -f $(enroot list); fi'
}
trap cleanup_pyxis TERM EXIT
cleanup_pyxis

export MODEL_NAME="llama2_70b_lora"
export MODEL_FRAMEWORK="pytorch"
LOGBASE="${DATESTAMP}"
SPREFIX="${MODEL_NAME}_${MODEL_FRAMEWORK}_${DGXNNODES}x${DGXNGPU}x${MINIBS}_${DATESTAMP}"
readonly _logfile_base="${LOGDIR}/${DATESTAMP}"
readonly _cont_name="${MODEL_NAME}_${SLURM_JOB_ID}"
readonly _seed_override=${SEED:-}
_cont_mounts="${DATADIR}:/data:ro,${MODEL}:/ckpt:ro,${LOGDIR}:/results:rw,\
/dev/infiniband/uverbs0:/dev/infiniband/uverbs0,\
/dev/infiniband/uverbs1:/dev/infiniband/uverbs1,\
/dev/infiniband/uverbs2:/dev/infiniband/uverbs2,\
/dev/infiniband/uverbs3:/dev/infiniband/uverbs3,\
/dev/infiniband/uverbs4:/dev/infiniband/uverbs4,\
/dev/infiniband/uverbs5:/dev/infiniband/uverbs5,\
/dev/infiniband/uverbs6:/dev/infiniband/uverbs6,\
/dev/infiniband/uverbs7:/dev/infiniband/uverbs7"

export NCCL_DEBUG=WARN
export NCCL_P2P_LEVEL=NVL
export NCCL_NET_GDR_LEVEL=1
export NCCL_IB_HCA='=mlx5_1,mlx5_2,mlx5_3,mlx5_4,mlx5_5,mlx5_6,mlx5_7'
export NCCL_IB_PCI_RELAXED_ORDERING=1
export NCCL_SOCKET_IFNAME=eno1

if [ ${NVTX_FLAG} -gt 0 ]; then
    if [[ "$LOGBASE" == *'_'* ]];then
        LOGBASE="${LOGBASE}_nsys"
    else
        LOGBASE="${SPREFIX}_nsys"
    fi
fi


# Cleanup data index dir
rm -rf "${LOGDIR}/data_index/train" "${LOGDIR}/data_index/val"
mkdir -p "${LOGDIR}/data_index/train" "${LOGDIR}/data_index/val"

if [ "${API_LOGGING:-}" -eq 1 ]; then
    API_LOG_DIR=${API_LOG_DIR}/${MODEL_FRAMEWORK}/${MODEL_NAME}/${DGXSYSTEM}
    mkdir -p ${API_LOG_DIR}
    _cont_mounts="${_cont_mounts},${API_LOG_DIR}:/logs"

    # Create JSON file for cuDNN
    JSON_MODEL_NAME="MLPERF_${MODEL_NAME}_${APILOG_MODEL_NAME}_${MODEL_FRAMEWORK}_train"
    JSON_README_LINK="${README_PREFIX}/${MODEL_NAME}/${MODEL_FRAMEWORK}/README.md"
    JSON_FMT='{model_name: $mn, readme_link: $rl, configs: {($dt): [$bs]}, sweep: {($dt): [$bs]}}'
    JSON_OUTPUT="MLPERF_${MODEL_NAME}_${MODEL_FRAMEWORK}_train.cudnn.json"
    jq -n --indent 4 --arg mn $JSON_MODEL_NAME --arg rl $JSON_README_LINK --arg dt $APILOG_PRECISION --arg bs $BATCHSIZE "$JSON_FMT" > ${API_LOG_DIR}/$JSON_OUTPUT
fi

if [ "${JET:-0}" -eq 1 ]; then
    _cont_mounts="${_cont_mounts},${JET_DIR}:/root/.jet"
fi

# MLPerf vars
MLPERF_HOST_OS=$(srun -N1 -n1 bash <<EOF
    source /etc/os-release
    source /etc/dgx-release || true
    echo "\${PRETTY_NAME} / \${DGX_PRETTY_NAME:-???} \${DGX_OTA_VERSION:-\${DGX_SWBUILD_VERSION:-???}}"
EOF
)
export MLPERF_HOST_OS


# Setup directories
( umask 0002; mkdir -p "${LOGDIR}" )
srun --ntasks="${SLURM_JOB_NUM_NODES}" mkdir -p "${LOGDIR}"

# Setup container
srun --ntasks="${SLURM_JOB_NUM_NODES}" --container-image="${CONT}" --container-name="${_cont_name}" true
srun -N1 -n1 --container-name="${_cont_name}" ibv_devinfo --list
srun -N1 -n1 --container-name="${_cont_name}" nvidia-smi topo -m

echo "NCCL_TEST = ${NCCL_TEST}"
if [[ ${NCCL_TEST} -eq 1 ]]; then
    (srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks="$(( SLURM_JOB_NUM_NODES * DGXNGPU ))" --ntasks-per-node="${DGXNGPU}" \
         --container-mounts=${_cont_mounts} \
         --container-name="${_cont_name}" all_reduce_perf_mpi -b 62M -e 62M -d half
) |& tee "${LOGDIR}/${SPREFIX}_nccl.log"
fi